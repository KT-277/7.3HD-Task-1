package com.example.vulnerableweb.controllers;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.annotation.PostConstruct;

@Controller
public class VulnerabilityController {

    @GetMapping("/")
    public String showIndex() {
        return "index"; // Display the index page
    }

    @GetMapping("/xss")
    public String showXSSPage() {
        return "xss"; // Display the XSS page
    }

    @PostMapping("/xss")
    public String handleXSS(@RequestParam String input, Model model) {
        model.addAttribute("message", input); // Allow raw HTML input
        return "xss"; // Return to the XSS page with the message
    }

    @GetMapping("/sql-injection")
    public String showSQLInjectionPage() {
        return "sql-injection"; // Display the SQL Injection page
    }

    @PostMapping("/sql-injection")
    public String handleSQLInjection(@RequestParam String username, @RequestParam String password, Model model) {
        String query = "SELECT * FROM users WHERE username = '" + username + "' AND password = '" + password + "'";
        boolean isAuthenticated = checkCredentials(query);
        
        if (isAuthenticated) {
            model.addAttribute("message", "Access granted for user: " + username);
        } else {
            model.addAttribute("message", "Access denied");
        }
    
        return "sql-injection"; // Return to the SQL Injection page with a message
    }

    private boolean checkCredentials(String query) {
        try (Connection conn = DriverManager.getConnection("jdbc:h2:mem:testdb", "sa", "")) {
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(query);
            return rs.next(); // Returns true if a record was found
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    @PostConstruct
    public void init() {
        try (Connection conn = DriverManager.getConnection("jdbc:h2:mem:testdb", "sa", "")) {
            Statement stmt = conn.createStatement();
            stmt.execute("CREATE TABLE users (username VARCHAR(255), password VARCHAR(255))");
            stmt.execute("INSERT INTO users (username, password) VALUES ('admin', 'password')");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @GetMapping("/upload")
    public String showFileUploadPage() {
        return "file-upload"; // Display the File Upload page
    }

    @PostMapping("/upload")
    public String handleFileUpload(@RequestParam("file") MultipartFile file, Model model) {
        if (file.isEmpty()) {
            model.addAttribute("message", "File upload failed: no file selected.");
        } else {
            model.addAttribute("message", "File uploaded successfully: " + file.getOriginalFilename());
        }
        return "file-upload"; // Return to the File Upload page with a message
    }

    @GetMapping("/csrf")
    public String showCSRFPage() {
        return "csrf"; // Display the CSRF page
    }

    @PostMapping("/csrf")
    public String handleCSRF(@RequestParam String csrfInput, Model model) {
        // Simulating CSRF validation (In a real application, you would validate CSRF tokens)
        String message = "CSRF input processed successfully: " + csrfInput;
        model.addAttribute("message", message);
        return "csrf"; // Return to the CSRF page with a message
    }

    @GetMapping("/aggregate")
    public String showAggregationPage() {
        return "data-aggregation"; // Display the Data Aggregation page
    }

    @PostMapping("/aggregate")
    public String handleAggregation(@RequestParam String info1, @RequestParam String info2, Model model) {
        // Simulating data aggregation vulnerability
        String aggregatedInfo = info1 + " " + info2;
        model.addAttribute("message", "Data aggregated successfully: " + aggregatedInfo);
        return "data-aggregation"; // Return to the Data Aggregation page with a message
    }
}
